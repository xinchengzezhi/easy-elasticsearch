<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.yzw.jc2.common.retry.mapper.RetryTaskMapper">
    <resultMap id="BaseResultMap" type="cn.yzw.jc2.common.retry.entity.RetryTaskDO">
        <id column="id" property="id"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
        <result column="retry_task_no" property="retryTaskNo"/>
        <result column="biz_key" property="bizKey"/>
        <result column="task_plan_exec_time" property="taskPlanExecTime"/>
        <result column="task_start_time" property="taskStartTime"/>
        <result column="task_exec_status" property="taskExecStatus"/>
        <result column="task_exec_count" property="taskExecCount"/>
        <result column="task_data" property="taskData"/>
        <result column="task_exec_msg" property="taskExecMsg"/>
        <result column="biz_sequence_no" property="bizSequenceNo"/>
        <result column="biz_sequence_priority" property="bizSequencePriority"/>
        <result column="biz_sequence_can_exec_second_time" property="bizSequenceCanExecSecondTime"/>
        <result column="biz_sequence_low_priority_can_exec" property="bizSequenceLowPriorityCanExec"/>
    </resultMap>
    <sql id="Base_Column_List">
        id
        , create_time, update_time, retry_task_no, biz_key, task_plan_exec_time, task_start_time,
    task_exec_status, task_exec_count, task_data, task_exec_msg, biz_sequence_no,biz_sequence_priority
        ,biz_sequence_can_exec_second_time,biz_sequence_low_priority_can_exec
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select /* RetryTaskMapper-selectByPrimaryKey */
        <include refid="Base_Column_List"/>
        from ${tableName}
        where id = #{id}
    </select>
    <select id="selectByNo" parameterType="java.lang.String" resultMap="BaseResultMap">
        select /* RetryTaskMapper-selectByNo */
        <include refid="Base_Column_List"/>
        from ${tableName}
        where retry_task_no = #{retryTaskNo}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from /* RetryTaskMapper-deleteByPrimaryKey */ ${tableName}
        where id = #{id}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="cn.yzw.jc2.common.retry.entity.RetryTaskDO"
            useGeneratedKeys="true">
        insert into /* RetryTaskMapper-insert */ ${tableName} (retry_task_no, biz_key, task_plan_exec_time,
                                                               task_start_time,
                                                               task_exec_status, task_exec_count, task_data,
                                                               task_exec_msg, biz_sequence_no,
                                                               biz_sequence_priority,
                                                               biz_sequence_can_exec_second_time,
                                                               biz_sequence_low_priority_can_exec)
        values (#{retryTaskNo}, #{bizKey}, #{taskPlanExecTime}, #{taskStartTime},
                #{taskExecStatus}, #{taskExecCount}, #{taskData},
                #{taskExecMsg}, #{bizSequenceNo}, #{bizSequencePriority}
                   , #{bizSequenceCanExecSecondTime}, #{bizSequenceLowPriorityCanExec})
    </insert>
    <insert id="batchInsert">
        insert into ${tableName} (retry_task_no, biz_key, task_plan_exec_time,
        task_start_time,
        task_exec_status, task_exec_count, task_data,
        task_exec_msg, biz_sequence_no,
        biz_sequence_priority,
        biz_sequence_can_exec_second_time,
        biz_sequence_low_priority_can_exec
        )
        values
        <foreach collection="taskDOList" item="item" separator=",">
            (#{item.retryTaskNo}, #{item.bizKey}, #{item.taskPlanExecTime}, #{item.taskStartTime},
            #{item.taskExecStatus}, #{item.taskExecCount}, #{item.taskData},
            #{item.taskExecMsg}, #{item.bizSequenceNo}, #{item.bizSequencePriority}
            , #{item.bizSequenceCanExecSecondTime}, #{item.bizSequenceLowPriorityCanExec})
        </foreach>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="cn.yzw.jc2.common.retry.entity.RetryTaskDO">
        update /* RetryTaskMapper-updateByPrimaryKeySelective */ ${tableName}
        <set>
            <if test="bizKey != null">
                biz_key = #{bizKey},
            </if>
            <if test="taskPlanExecTime != null">
                task_plan_exec_time = #{taskPlanExecTime},
            </if>
            <if test="taskStartTime != null">
                task_start_time = #{taskStartTime},
            </if>
            <if test="taskExecStatus != null and taskExecStatus != '' ">
                task_exec_status = #{taskExecStatus},
            </if>
            <if test="taskExecCount != null">
                task_exec_count = #{taskExecCount},
            </if>
            <if test="taskData != null and taskData != ''">
                task_data = #{taskData},
            </if>
            <if test="taskExecMsg != null and taskExecMsg != '' ">
                task_exec_msg = #{taskExecMsg},
            </if>
            <if test="bizSequenceNo != null and bizSequenceNo != '' ">
                biz_sequence_no = #{bizSequenceNo},
            </if>
        </set>
        where id = #{id}
    </update>
    <update id="updateByPrimaryKey" parameterType="cn.yzw.jc2.common.retry.entity.RetryTaskDO">
        update /* RetryTaskMapper-updateByPrimaryKey */ ${tableName}
        set biz_key             = #{bizKey},
            task_plan_exec_time = #{taskPlanExecTime},
            task_start_time     = #{taskStartTime},
            task_exec_status    = #{taskExecStatus},
            task_exec_count     = #{taskExecCount},
            task_data           = #{taskData},
            task_exec_msg       = #{taskExecMsg},
            biz_sequence_no    = #{bizSequenceNo}
        where id = #{id}
    </update>
    <update id="updateResultStatusByNo">
        update /* RetryTaskMapper-updateResultStatusByNo */ ${tableName}
        <set>
            <if test="taskExecStatus != null and taskExecStatus != ''">
                task_exec_status = #{taskExecStatus,jdbcType=VARCHAR},
            </if>
            <if test="taskExecMsg != null and taskExecMsg != ''">
                task_exec_msg = #{taskExecMsg,jdbcType=VARCHAR},
            </if>
        </set>
        where retry_task_no = #{retryTaskNo}
    </update>

    <update id="updateResultStatusByNoList">
        update /* RetryTaskMapper-updateResultStatusByNoList */ ${tableName}
        set task_exec_status = #{taskExecStatus},
        task_exec_msg = #{taskExecMsg}
        where retry_task_no in
        <foreach collection="list" item="retryTaskNo" open="(" separator="," close=")">
            #{retryTaskNo}
        </foreach>
    </update>

    <update id="updateExecutingStatusByNo">
        update /* RetryTaskMapper-updateExecutingStatusByNo */ ${tableName}
        set task_exec_status = #{taskExecStatus},
            task_start_time  = now(3),
            task_exec_count  = task_exec_count + 1
        where retry_task_no = #{retryTaskNo}
    </update>

    <delete id="deleteByNo">
        delete
        from /* RetryTaskMapper-deleteByNo */ ${tableName}
        where retry_task_no = #{retryTaskNo}
    </delete>

    <delete id="resetByNo">
        update /* RetryTaskMapper-resetByNo */ ${tableName}
        set task_exec_count = 0
        where retry_task_no = #{retryTaskNo}
    </delete>

    <select id="selectExecutableTask" resultMap="BaseResultMap">
        select /* RetryTaskMapper-selectExecutableTask */
        <include refid="Base_Column_List"/>
        from ${tableName}
        where (
        task_exec_status = 'PENDING'
        or
        (task_exec_status = 'FAIL' and task_exec_count <![CDATA[ < ]]> #{maxRetryTimes})
        or
        (task_exec_status = 'EXECUTING' and task_start_time <![CDATA[ < ]]>#{timeOutStartTime})
        )
        and id>#{minId}
        and task_plan_exec_time <![CDATA[ <= ]]> now()
        <if test="includeBizTypes !=null and includeBizTypes.size > 0">
            and biz_key in
            <foreach collection="includeBizTypes" index="idx" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="excludeBizTypes !=null and excludeBizTypes.size > 0">
            and biz_key not in
            <foreach collection="excludeBizTypes" index="idx" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        order by id asc
        limit #{pageSize}
    </select>
    <select id="selectPrevBizSequenceTask" resultMap="BaseResultMap">
        select /* RetryTaskMapper-selectPrevBizSequenceTask */
        <include refid="Base_Column_List"/>
        from ${tableName}
        where biz_sequence_no = #{bizSequenceNo} and biz_key = #{bizKey}
        and biz_sequence_priority <![CDATA[<]]> #{bizSequencePriority}
    </select>
    <select id="selectExecTaskByBizSequenceNo" resultMap="BaseResultMap">
        select /* RetryTaskMapper-selectExecTaskByBizSequenceNo */
        <include refid="Base_Column_List"/>
        from ${tableName}
        <![CDATA[
    where (
        task_exec_status = 'PENDING'
        or
        (task_exec_status = 'FAIL' and task_exec_count < #{maxRetryTimes})
        or
        (task_exec_status = 'EXECUTING' and task_start_time < #{timeOutStartTime})
    )
    and task_plan_exec_time <= now()
    and biz_sequence_no = #{bizSequenceNo}
    ]]>
        order by biz_sequence_priority,id
    </select>

    <select id="selectUnexecutableTask" resultMap="BaseResultMap">
        select /* RetryTaskMapper-selectUnexecutableTask */
        <include refid="Base_Column_List"/>
        from ${tableName}
        where task_exec_status = 'FAIL'
        and task_exec_count >= #{maxRetryTimes}
        order by id
        limit #{pageSize}
    </select>
    <select id="queryBatchForDel" resultType="java.lang.Long">
        select
        id
        from ${tableName}
        where task_exec_status ='SUCCESS'
        <if test="date!=null">
            and update_time <![CDATA[ <= ]]>  #{date}
        </if>
        <if test="minId!=null">
            and id > #{minId}
        </if>
        order by id asc
        limit #{limit}
    </select>
    <select id="batchQueryByTaskNos" resultMap="BaseResultMap">
        select /* RetryTaskMapper-batchQueryByTaskNos */
        <include refid="Base_Column_List"/>
        from ${tableName}
        where retry_task_no in
        <foreach collection="retryTaskNos" item="retryTaskNo" open="(" separator="," close=")">
            #{retryTaskNo}
        </foreach>
    </select>
    <delete id="batchDeleteByPrimaryKey">
        delete
        from ${tableName}
        where id in
        <foreach collection="ids" open="(" close=")" item="id" index="index" separator=",">
            #{id}
        </foreach>
    </delete>
</mapper>